name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  # ===== Phase CI : Build et Tests =====
  test:
    name: 🧪 Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🔍 Verify Maven Wrapper
      run: |
        chmod +x ./mvnw
        ./mvnw --version
        
    - name: 🏗️ Build application
      run: ./mvnw clean compile -B -ntp
      
    - name: 🧪 Run tests
      run: ./mvnw test -B -ntp
      
    - name: 📊 Test Results Summary
      if: always()
      run: |
        echo "📋 Résumé des tests Maven :"
        if [ -f "target/surefire-reports/TEST-*.xml" ]; then
          echo "✅ Fichiers de rapport de tests trouvés"
          tests=$(grep -o 'tests="[0-9]*"' target/surefire-reports/TEST-*.xml | head -1 | grep -o '[0-9]*')
          failures=$(grep -o 'failures="[0-9]*"' target/surefire-reports/TEST-*.xml | head -1 | grep -o '[0-9]*')
          errors=$(grep -o 'errors="[0-9]*"' target/surefire-reports/TEST-*.xml | head -1 | grep -o '[0-9]*')
          echo "📊 Tests exécutés: $tests"
          echo "❌ Échecs: $failures"
          echo "⚠️ Erreurs: $errors"
          if [ "$failures" = "0" ] && [ "$errors" = "0" ]; then
            echo "🎉 Tous les tests sont passés !"
          else
            echo "💥 Des tests ont échoué"
            exit 1
          fi
        else
          echo "⚠️ Aucun rapport de test trouvé"
        fi
        
    - name: 🔧 Build JAR
      run: ./mvnw package -DskipTests -B -ntp
      
    - name: 📤 Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-jar
        path: target/*.jar
        retention-days: 1
        
    - name: 🐳 Test Docker build
      run: |
        echo "🐳 Test de build Docker..."
        docker build -t demo-spring-test .
        echo "✅ Docker build réussi !"

  # ===== Phase CD : Notification de déploiement =====
  deploy-ready:
    name: 🚀 Ready for Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🎉 Build Success Notification
      run: |
        echo "🎉 Build réussi sur la branche main !"
        echo "📦 JAR généré et testé avec succès"
        echo "🐳 Image Docker validée"
        echo ""
        echo "🚀 Render va automatiquement déployer car connecté au repo GitHub"
        echo "📍 Vérifiez le déploiement sur: https://dashboard.render.com"
        echo ""
        echo "⏱️ Le déploiement prend généralement 3-5 minutes"
        
    - name: ⏳ Wait for deployment
      run: |
        echo "🔄 Attente du déploiement (90s)..."
        sleep 90
        
    - name: 🔍 Health check
      run: |
        echo "🩺 Vérification de l'API..."
        for i in {1..5}; do
          if curl -f "${{ secrets.RENDER_URL }}/actuator/health"; then
            echo "✅ API déployée avec succès !"
            exit 0
          else
            echo "⚠️ Tentative $i/5 échouée, retry dans 30s..."
            sleep 30
          fi
        done
        echo "❌ Health check failed après 5 tentatives"
        exit 1

  # ===== Tests d'intégration post-déploiement =====
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-ready
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🚀 Wait and Test Deployment
      run: |
        echo "🔍 Attente et vérification du déploiement Render..."
        
        # Fonction de test de santé avec timeout étendu
        test_health() {
          local max_attempts=20  # 20 tentatives = 10 minutes max
          local wait_time=30     # 30 secondes entre chaque tentative
          
          echo "🩺 Test du health endpoint (max ${max_attempts} tentatives, ${wait_time}s d'intervalle)..."
          
          for i in $(seq 1 $max_attempts); do
            echo "⏳ Tentative $i/$max_attempts..."
            
            if curl -f -m 10 "${{ secrets.RENDER_URL }}/actuator/health" 2>/dev/null; then
              echo "✅ Health check réussi à la tentative $i !"
              return 0
            else
              if [ $i -eq $max_attempts ]; then
                echo "❌ Health check échoué après $max_attempts tentatives"
                return 1
              fi
              
              echo "⚠️ Échec tentative $i, retry dans ${wait_time}s..."
              sleep $wait_time
            fi
          done
        }
        
        # Test des endpoints
        if test_health; then
          echo "🧪 Test des endpoints API..."
          
          # Test endpoint players (avec auth basique)
          echo "Testing players endpoint..."
          if curl -f -m 10 -u "isis:abc123" "${{ secrets.RENDER_URL }}/players?page=0&size=5" 2>/dev/null; then
            echo "✅ Players endpoint OK"
          else
            echo "⚠️ Players endpoint non accessible"
          fi
          
          echo "� Tests d'intégration terminés avec succès !"
        else
          echo "💥 Le déploiement semble avoir des problèmes"
          echo "🔍 Vérifiez les logs Render : https://dashboard.render.com"
          exit 1
        fi