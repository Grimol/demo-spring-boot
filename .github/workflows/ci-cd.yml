name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  # ===== Phase CI : Build et Tests =====
  test:
    name: 🧪 Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🔍 Verify Maven Wrapper
      run: |
        chmod +x ./mvnw
        ./mvnw --version
        
    - name: 🏗️ Build application
      run: ./mvnw clean compile -B -ntp
      
    - name: 🧪 Run tests
      run: ./mvnw test -B -ntp
      
    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: 📋 Maven Tests Report
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: true
        
    - name: 🔧 Build JAR
      run: ./mvnw package -DskipTests -B -ntp
      
    - name: 📤 Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-jar
        path: target/*.jar
        retention-days: 1
        
    - name: 🐳 Test Docker build
      run: |
        echo "🐳 Test de build Docker..."
        docker build -t demo-spring-test .
        echo "✅ Docker build réussi !"

  # ===== Phase CD : Déploiement sur Render =====
  deploy:
    name: 🚀 Deploy to Render
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Render via API
      run: |
        echo "🚀 Déclenchement du déploiement Render..."
        response=$(curl -s -w "%{http_code}" -X POST \
          -H "Accept: application/json" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys")
        
        http_code="${response: -3}"
        if [ "$http_code" = "201" ]; then
          echo "✅ Déploiement déclenché avec succès"
        else
          echo "❌ Erreur lors du déclenchement: $http_code"
          echo "Response: ${response%???}"
          exit 1
        fi
        
    - name: ⏳ Wait for deployment
      run: |
        echo "🔄 Attente du déploiement (90s)..."
        sleep 90
        
    - name: 🔍 Health check
      run: |
        echo "🩺 Vérification de l'API..."
        for i in {1..5}; do
          if curl -f "${{ secrets.RENDER_URL }}/actuator/health"; then
            echo "✅ API déployée avec succès !"
            exit 0
          else
            echo "⚠️ Tentative $i/5 échouée, retry dans 30s..."
            sleep 30
          fi
        done
        echo "❌ Health check failed après 5 tentatives"
        exit 1

  # ===== Tests d'intégration post-déploiement =====
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🧪 Test API endpoints
      run: |
        echo "🔍 Test des endpoints API..."
        
        # Test endpoint de santé
        echo "Testing health endpoint..."
        curl -f "${{ secrets.RENDER_URL }}/actuator/health"
        
        # Test endpoint players (avec auth basique)
        echo "Testing players endpoint..."
        curl -f -u "isis:abc123" "${{ secrets.RENDER_URL }}/players?page=0&size=5"
        
        echo "✅ Tous les tests d'intégration sont passés !"